version: '2'

# PR Pipeline: pr-code-checks, code-pr-finish
tasks:
  pr-code-checks:
    include:
      - dind
    steps:
      - name: checks-setup
        when: 'false'
      - name: detect-secrets
        when: 'false'
      - name: unit-test
        include:
          - docker-socket
          - dind
        image: icr.io/continuous-delivery/base-images/base:v1.19.0
        displayName: Build amd image
        runtimeClassName: x86-xlarge
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
              trap env EXIT
              env
              set -x
          fi
          cd "$WORKSPACE/$(load_repo app-repo path)"
          export ARCH="amd64"
          export GIT_BRANCH="$(get_env git-branch)"
          export GIT_COMMIT="$(get_env git-commit)"
          export BUILD_TAG="${GIT_COMMIT:0:7}"
          source build_scripts/setup_env.sh
          source build_scripts/build_image.sh
      - name: compliance-checks
        when: 'false'

  pr-code-checks-ppc:
    from: pr-code-checks
    include:
      - dind
    steps:
      - name: checks-setup
        when: 'false'
      - name: detect-secrets
        when: 'false'
      - name: unit-test
        include:
          - docker-socket
          - dind
        image: icr.io/continuous-delivery/base-images/base:v1.19.0
        displayName: Build ppc image
        runtimeClassName: x86-xlarge
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
              trap env EXIT
              env
              set -x
          fi
          cd "$WORKSPACE/$(load_repo app-repo path)"
          export ARCH="ppc64le"
          export GIT_BRANCH="$(get_env git-branch)"
          export GIT_COMMIT="$(get_env git-commit)"
          export BUILD_TAG="${GIT_COMMIT:0:7}"
          source build_scripts/setup_env.sh
          source build_scripts/build_image.sh
      - name: compliance-checks
        when: 'false'

  pr-code-checks-s390:
    from: pr-code-checks
    include:
      - dind
    steps:
      - name: checks-setup
        when: 'false'
      - name: detect-secrets
        when: 'false'
      - name: unit-test
        include:
          - docker-socket
          - dind
        image: icr.io/continuous-delivery/base-images/base:v1.19.0
        displayName: Build s390 image
        runtimeClassName: x86-xlarge
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
              trap env EXIT
              env
              set -x
          fi
          cd "$WORKSPACE/$(load_repo app-repo path)"
          export ARCH="s390x"
          export GIT_BRANCH="$(get_env git-branch)"
          export GIT_COMMIT="$(get_env git-commit)"
          export BUILD_TAG="${GIT_COMMIT:0:7}"
          source build_scripts/setup_env.sh
          source build_scripts/build_image.sh
      - name: compliance-checks
        when: 'false'

  pr-code-checks-multiarch:
    from: pr-code-checks
    runAfter: 
      - pr-code-checks
      - pr-code-checks-ppc
      - pr-code-checks-s390
    include:
      - dind
    steps:
      - name: checks-setup
        when: 'false'
      - name: detect-secrets
        when: 'false'
      - name: unit-test
        include:
          - docker-socket
          - dind
        image: icr.io/continuous-delivery/base-images/base:v1.19.0
        displayName: Build multiarch image
        runtimeClassName: x86-xlarge
        script: |
          #!/usr/bin/env bash
          if [[ "$PIPELINE_DEBUG" == 1 ]]; then
              trap env EXIT
              env
              set -x
          fi
          cd "$WORKSPACE/$(load_repo app-repo path)"
          export GIT_BRANCH="$(get_env git-branch)"
          export GIT_COMMIT="$(get_env git-commit)"
          export BUILD_TAG="${GIT_COMMIT:0:7}"
          source build_scripts/setup_env.sh
          source build_scripts/build_multiarch.sh
      - name: compliance-checks
        when: 'false'
 
finally:
  code-pr-finish:
    steps:
      - name: run-stage
        when: 'false'
