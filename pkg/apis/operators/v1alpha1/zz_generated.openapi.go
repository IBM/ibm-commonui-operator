// +build !ignore_autogenerated

//
// Copyright 2020 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.CommonWebUI":          schema_pkg_apis_operators_v1alpha1_CommonWebUI(ref),
		"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.CommonWebUIConfig":    schema_pkg_apis_operators_v1alpha1_CommonWebUIConfig(ref),
		"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.CommonWebUISpec":      schema_pkg_apis_operators_v1alpha1_CommonWebUISpec(ref),
		"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.CommonWebUIStatus":    schema_pkg_apis_operators_v1alpha1_CommonWebUIStatus(ref),
		"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.GlobalUIConfig":       schema_pkg_apis_operators_v1alpha1_GlobalUIConfig(ref),
		"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyConfig":         schema_pkg_apis_operators_v1alpha1_LegacyConfig(ref),
		"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyGlobalUIConfig": schema_pkg_apis_operators_v1alpha1_LegacyGlobalUIConfig(ref),
		"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyHeader":         schema_pkg_apis_operators_v1alpha1_LegacyHeader(ref),
		"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyHeaderSpec":     schema_pkg_apis_operators_v1alpha1_LegacyHeaderSpec(ref),
		"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyHeaderStatus":   schema_pkg_apis_operators_v1alpha1_LegacyHeaderStatus(ref),
	}
}

func schema_pkg_apis_operators_v1alpha1_CommonWebUI(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommonWebUI is the Schema for the commonwebuis API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.CommonWebUISpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.CommonWebUIStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.CommonWebUISpec", "github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.CommonWebUIStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operators_v1alpha1_CommonWebUIConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommonWebUIConfig defines the desired state of CommonWebUIConfig",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"serviceName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imageRegistry": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cpuLimits": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cpuMemory": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"requestLimits": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"requestMemory": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ingressPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operators_v1alpha1_CommonWebUISpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommonWebUISpec defines the desired state of CommonWebUISpec",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"commonWebUIConfig": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.CommonWebUIConfig"),
						},
					},
					"globalUIConfig": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.GlobalUIConfig"),
						},
					},
					"operatorVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.CommonWebUIConfig", "github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.GlobalUIConfig"},
	}
}

func schema_pkg_apis_operators_v1alpha1_CommonWebUIStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CommonWebUIStatus defines the observed state of CommonWebUI",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"nodes"},
			},
		},
	}
}

func schema_pkg_apis_operators_v1alpha1_GlobalUIConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GlobalUIConfig defines the desired state of GlobalUIConfig",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pullSecret": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"routerURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"identityProviderURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"authServiceURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cloudPakVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"defaultAdminUser": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"routerHTTPSPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sessionPollingInterval": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operators_v1alpha1_LegacyConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LegacyConfig defines the desired state of LegacyConfig",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"serviceName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imageRegistry": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imageTag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cpuLimits": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cpuMemory": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"requestLimits": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"requestMemory": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"legacyLogoPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"legacyLogoWidth": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"legacyLogoHeight": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"legacySupportURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"legacyDocURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"legacyLogoAltText": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ingressPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operators_v1alpha1_LegacyGlobalUIConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LegacyGlobalUIConfig defines the desired state of LegacyGlobalUIConfig",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pullSecret": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"routerURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"identityProviderURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"authServiceURL": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"cloudPakVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"defaultAdminUser": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"routerHTTPSPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"sessionPollingInterval": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_operators_v1alpha1_LegacyHeader(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LegacyHeader is the Schema for the legacyHeader API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyHeaderSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyHeaderStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyHeaderSpec", "github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyHeaderStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_operators_v1alpha1_LegacyHeaderSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LegacyHeaderSpec defines the desired state of LegacyHeaderSpec",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"legacyConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Ref:         ref("github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyConfig"),
						},
					},
					"legacyGlobalUIConfig": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyGlobalUIConfig"),
						},
					},
					"operatorVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyConfig", "github.com/ibm/ibm-commonui-operator/pkg/apis/operators/v1alpha1.LegacyGlobalUIConfig"},
	}
}

func schema_pkg_apis_operators_v1alpha1_LegacyHeaderStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LegacyHeaderStatus defines the observed state of LegacyHeaderService",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"nodes"},
			},
		},
	}
}
